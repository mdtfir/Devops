const Student = require('../models/Student'); // Adjust the path if necessary
const sharp = require('sharp'); // Image processing library

async function updateStudent(req, res) {
    const { adminNumber, name, diploma, cGPA, image, ...extraFields } = req.body;

    try {
        // Prepare update object dynamically based on provided fields
        const updateFields = {};

        if (!adminNumber) {
            return res.status(400).json({ message: 'Admin number is required' });
        }
        if (adminNumber) updateFields.adminNumber = adminNumber;

        const adminNumberRegex = /^[0-9]{7}[A-Za-z]$/;
        if (!adminNumberRegex.test(adminNumber)) {
            return res.status(400).json({ message: 'Invalid admin number format' });
        }

        const allowedFields = ['name', 'diploma', 'cGPA', 'image'];
        const invalidFields = Object.keys(extraFields).filter(
            (field) => !allowedFields.includes(field)
        );

        if (invalidFields.length > 0) {
            return res.status(400).json({ message: `Invalid fields: ${invalidFields.join(', ')}` });
        }

        // Only proceed to update if there is data provided
        if (!name && !diploma && !cGPA && !image) {
            return res.status(400).json({ message: 'No data provided for update' });
        }

        // Check name length if provided
        if (name && name.length > 255) {
            return res.status(400).json({ message: 'Name exceeds maximum length of 255 characters' });
        }

        if (name) updateFields.name = name;
        if (diploma) updateFields.diploma = diploma;
        if (cGPA) updateFields.cGPA = cGPA;

        if (image) {
            // Check base64 format with a regex for proper format
            const base64Regex = /^data:image\/([a-zA-Z]+);base64,/;
            const matches = base64Regex.exec(image);

            if (!matches) {
                console.error('Invalid base64 image format:', image);
                return res.status(400).json({ message: 'Invalid base64 image format' });
            }
            console.log('Base64 format is valid.');

            const imageType = matches[1]; // Extract the image type (e.g., png, jpeg)
            console.log('Image type detected:', imageType);

            // Extract base64 data (without the prefix part)
            const imageData = image.split(',')[1];
            console.log('Extracted base64 image data.');

            // Attempt to decode base64 into a buffer
            let buffer;
            try {
                buffer = Buffer.from(imageData, 'base64');
                console.log('Base64 decoded into a buffer.');

                // Ensure the buffer is valid and not empty
                if (!Buffer.isBuffer(buffer) || buffer.length === 0) {
                    console.log("Buffer is empty or invalid.");
                    return res.status(400).json({ message: 'Unable to buffer base64 data' });
                }

                // Validate image data using sharp
                const metadata = await sharp(buffer).metadata();
                const { width, height, format } = metadata;
                console.log(`Image metadata: width=${width}, height=${height}, format=${format}`);

                // Validate the format is one of the supported types
                if (!['png', 'jpeg', 'jpg', 'gif', 'webp'].includes(format)) {
                    console.error('Unsupported image format:', format);
                    return res.status(400).json({ message: 'Unsupported image format' });
                }

                // Check that the image is square
                if (width !== height) {
                    console.error('Image is not square:', `width=${width}, height=${height}`);
                    return res.status(400).json({ message: 'Image must be square (equal width and height).' });
                }

                // If everything checks out, include the image in the update
                console.log('Image passed all validation checks.');
                updateFields.image = image;

            } catch (error) {
                console.error('Error processing image data:', error.message);
                return res.status(400).json({ message: 'Invalid image data, format, or external error' });
            }


            // Validate cGPA if provided
            if (cGPA && isNaN(parseFloat(cGPA))) {
                return res.status(400).json({ message: 'Invalid cGPA value' });
            }

            console.log("updateFields:", updateFields);

            // Perform the update
            const student = await Student.findOneAndUpdate(
                { adminNumber },
                updateFields,
                { new: true } // Return the updated document
            );

            if (!student) {
                return res.status(404).json({ message: 'Student not found' });
            }

            res.status(200).json({
                message: 'Student updated successfully',
                student
            });
        } catch (error) {
            console.error('Error updating student:', error.message);
            res.status(500).json({ message: 'Error updating student: ' + error.message });
        }
    }

module.exports = updateStudent;
